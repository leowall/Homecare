# Time series analysis of Homecare Hours and projections based on DataCamp tutorial for forecasting using timeseries data

.libPaths("U:/R/library")

library(tidyverse)
library(readxl)
library(fpp2)
library(forecast)
library(stringr)
library(lubridate)

HCHours <- read_xlsx("Data/Home Care Neighbourhood Monthly Activity Apr 15 - Mar 19.xlsx", sheet = "All Months Data")

# Add Year, Month, QuarterEnd and MonthStart dates
HCHours_Table <- HCHours %>%
  mutate(Year = str_c("20", substr(Period, start = 1, stop = 2)),
         Month = substr(Period, start = 4, stop = 5),
         Quarter = if_else(Month %in% c("04", "05", "06"), as.double(1),
                           if_else( Month %in% c("07", "08", "09"), as.double(2), 
                                    if_else(Month %in% c("10", "11", "12"), as.double(3),
                                            if_else(Month %in% c("01", "02", "03"), as.double(4), 
                                                    as.double(0))))),
         MonthStart = make_date(Year, Month, 01),
         QuarterEnd = if_else(Quarter == 4, make_date(Year, 03, 31),
                              if_else(Quarter == 3, make_date(Year, 12, 31),
                                      if_else(Quarter == 2, make_date(Year, 09, 30),
                                              make_date(Year, 06, 30)))),
         Year = year(QuarterEnd),
         Month = month(MonthStart))

# total number of homecare hours each month at city level                             
City_HCHours <- HCHours_Table %>%
  group_by(MonthStart) %>%
  summarise(TotalHours = sum(`Total Hours`))

# create timeseries for citywide monthly homecare hours
City_HCHoursTS <- ts(City_HCHours[, 2], start = c(2015, 4), frequency = 12)

# initial plots of timeseries data to examine trend, seasonality and cyclicity and test white noise
autoplot(City_HCHoursTS)
autoplot(diff(City_HCHoursTS))
ggseasonplot(City_HCHoursTS)
ggsubseriesplot(City_HCHoursTS)
# plot lag and acf plot
gglagplot(City_HCHoursTS)
# Acf plot shows whether TS is white noise - peaks outside blue dashed lines show not
# white noise so can be used for forecasting
ggAcf(City_HCHoursTS)
ggAcf(diff(City_HCHoursTS))
# Ljung-Box test to see if TS is white noise - small p value indicates not white noise
Box.test(City_HCHoursTS, lag = 24, fitdf = 0, type = "Ljung")

# simple forecasting models and tests to show accuracy of them
# subset timeseries into training and test data sets to test whether model is good
# and not overfitted
train <- subset(City_HCHoursTS, end = 36)
naive_fc <- naive(train, h = 8)
mean_fc <- meanf(train, h = 8)
accuracy(naive_fc, City_HCHoursTS)
accuracy(mean_fc, City_HCHoursTS)
# forecast of seasonal method
train1 <- window(City_HCHoursTS, end = c(2018, 3))
fc1 <- snaive(train1, h = 12)
accuracy(fc1, City_HCHoursTS)

# more advanced forecasts
ets_fc <- ets(City_HCHoursTS)
summary(ets_fc)
# check residuals of the forecast model - they must be uncorrelated and have a mean of zero
# they should also have a constant variance and be normally distributed
# Ljung-Box test identifies if residuals are random i.e. white noise p-value above 0.05 show residuals are white noise
checkresiduals(ets_fc)

City_HCHoursTS %>%
  ets() %>%
  forecast(h = 52) %>%
  autoplot()

# box cox variance
BoxCox.lambda(City_HCHoursTS)

# ARIMA model
# Arima_fc <- auto.arima(City_HCHoursTS, lambda = 1.3)
Arima_fc <- auto.arima(City_HCHoursTS)
Arima_fc <- auto.arima(City_HCHoursTS, stepwise = FALSE)

summary(Arima_fc)
checkresiduals(Arima_fc)
Arima_fc %>%
  forecast(h = 52) %>%
  autoplot()

# test best model between ets and arima
fets <- function(x, h) {
  forecast(ets(x), h = h)
}
farima <- function(x, h) {
  forecast(ets(x), h = h)
}
e1 <- tsCV(City_HCHoursTS, fets, h = 1)
e2 <- tsCV(City_HCHoursTS, farima, h = 1)

mean(e1^2, na.rm = TRUE)
mean(e2^2, na.rm = TRUE)

City_HCHoursTS %>%
  farima(h = 52) %>%
  autoplot()

# compare forecasts for arima and ets models
ets1 <- ets(train1)
ari1 <- auto.arima(train1)

checkresiduals(ets1)
checkresiduals(ari1)

ets_fc1 <- forecast(ets1, h = 52)
ari_fc1 <- forecast(ari1, h = 52)

accuracy(ets_fc1, City_HCHoursTS)
accuracy(ari_fc1, City_HCHoursTS)

# Dynamic regression add xreg to auto.arima function - add explanatory variable(s) using xreg
# explanatory variable needs to be in a matrix
fit <- auto.arima(City_HCHoursTS, xreg = )
